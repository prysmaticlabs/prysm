diff --git a/clientconn.go b/clientconn.go
index 95a7459b..a7acdabc 100644
--- a/clientconn.go
+++ b/clientconn.go
@@ -1323,18 +1323,11 @@ func (ac *addrConn) resetTransport() {
 		// Give dial more time as we keep failing to connect.
 		dialDuration = backoffFor
 	}
-	// We can potentially spend all the time trying the first address, and
-	// if the server accepts the connection and then hangs, the following
-	// addresses will never be tried.
-	//
-	// The spec doesn't mention what should be done for multiple addresses.
-	// https://github.com/grpc/grpc/blob/master/doc/connection-backoff.md#proposed-backoff-algorithm
-	connectDeadline := time.Now().Add(dialDuration)
 
 	ac.updateConnectivityState(connectivity.Connecting, nil)
 	ac.mu.Unlock()
 
-	if err := ac.tryAllAddrs(acCtx, addrs, connectDeadline); err != nil {
+	if err := ac.tryAllAddrs(acCtx, addrs, dialDuration); err != nil {
 		ac.cc.resolveNow(resolver.ResolveNowOptions{})
 		// After exhausting all addresses, the addrConn enters
 		// TRANSIENT_FAILURE.
@@ -1377,7 +1370,7 @@ func (ac *addrConn) resetTransport() {
 // tryAllAddrs tries to creates a connection to the addresses, and stop when at
 // the first successful one. It returns an error if no address was successfully
 // connected, or updates ac appropriately with the new transport.
-func (ac *addrConn) tryAllAddrs(ctx context.Context, addrs []resolver.Address, connectDeadline time.Time) error {
+func (ac *addrConn) tryAllAddrs(ctx context.Context, addrs []resolver.Address, dialDuration time.Duration) error {
 	var firstConnErr error
 	for _, addr := range addrs {
 		if ctx.Err() != nil {
@@ -1397,6 +1390,7 @@ func (ac *addrConn) tryAllAddrs(ctx context.Context, addrs []resolver.Address, c
 
 		channelz.Infof(logger, ac.channelzID, "Subchannel picks a new address %q to connect", addr.Addr)
 
+		connectDeadline := time.Now().Add(dialDuration)
 		err := ac.createTransport(ctx, addr, copts, connectDeadline)
 		if err == nil {
 			return nil
