// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/prysmaticlabs/prysm/v4/proto/prysm/v1alpha1/validator-client (interfaces: RemoteSignerClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	validatorpb "github.com/prysmaticlabs/prysm/v4/proto/prysm/v1alpha1/validator-client"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// RemoteSignerClient is a mock of RemoteSignerClient interface.
type RemoteSignerClient struct {
	ctrl     *gomock.Controller
	recorder *RemoteSignerClientMockRecorder
}

// RemoteSignerClientMockRecorder is the mock recorder for MockRemoteSignerClient.
type RemoteSignerClientMockRecorder struct {
	mock *RemoteSignerClient
}

// NewMockRemoteSignerClient creates a new mock instance.
func NewMockRemoteSignerClient(ctrl *gomock.Controller) *RemoteSignerClient {
	mock := &RemoteSignerClient{ctrl: ctrl}
	mock.recorder = &RemoteSignerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *RemoteSignerClient) EXPECT() *RemoteSignerClientMockRecorder {
	return m.recorder
}

// ListValidatingPublicKeys mocks base method.
func (m *RemoteSignerClient) ListValidatingPublicKeys(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*validatorpb.ListPublicKeysResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListValidatingPublicKeys", varargs...)
	ret0, _ := ret[0].(*validatorpb.ListPublicKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListValidatingPublicKeys indicates an expected call of ListValidatingPublicKeys.
func (mr *RemoteSignerClientMockRecorder) ListValidatingPublicKeys(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListValidatingPublicKeys", reflect.TypeOf((*RemoteSignerClient)(nil).ListValidatingPublicKeys), varargs...)
}

// Sign mocks base method.
func (m *RemoteSignerClient) Sign(arg0 context.Context, arg1 *validatorpb.SignRequest, arg2 ...grpc.CallOption) (*validatorpb.SignResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sign", varargs...)
	ret0, _ := ret[0].(*validatorpb.SignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *RemoteSignerClientMockRecorder) Sign(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*RemoteSignerClient)(nil).Sign), varargs...)
}
