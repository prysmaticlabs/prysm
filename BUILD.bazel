load("@bazel_gazelle//:def.bzl", "gazelle")
load("@com_github_atlassian_bazel_tools//gometalinter:def.bzl", "gometalinter")
load("@com_github_atlassian_bazel_tools//goimports:def.bzl", "goimports")
load("@io_kubernetes_build//defs:run_in_workspace.bzl", "workspace_binary")
load("@io_bazel_rules_go//go:def.bzl", "nogo")
load("@bazel_skylib//rules:common_settings.bzl", "string_setting")

prefix = "github.com/prysmaticlabs/prysm"

exports_files([
    "LICENSE.md",
])

# gazelle:prefix github.com/prysmaticlabs/prysm/v4
# gazelle:map_kind go_library go_library @prysm//tools/go:def.bzl
# gazelle:map_kind go_test go_test @prysm//tools/go:def.bzl
# gazelle:map_kind go_repository go_repository @prysm//tools/go:def.bzl
# gazelle:build_tags bazel
# gazelle:exclude tools/analyzers/**/testdata/**
gazelle(
    name = "gazelle",
    prefix = prefix,
)

# Protobuf compiler (non-gRPC)
alias(
    name = "proto_compiler",
    actual = "@io_bazel_rules_go//proto:go_proto",
    visibility = [
        "//proto:__subpackages__",
    ],
)

# Cast protobuf compiler (non-gRPC)
alias(
    name = "cast_proto_compiler",
    actual = "@com_github_prysmaticlabs_protoc_gen_go_cast//:go_cast",
    visibility = [
        "//proto:__subpackages__",
    ],
)

# Protobuf compiler (gRPC)
alias(
    name = "grpc_proto_compiler",
    actual = "@io_bazel_rules_go//proto:go_grpc",
    visibility = ["//visibility:public"],
)

# Cast protobuf compiler (gRPC)
alias(
    name = "cast_grpc_proto_compiler",
    actual = "@com_github_prysmaticlabs_protoc_gen_go_cast//:go_cast_grpc",
    visibility = ["//visibility:public"],
)

# Protobuf gRPC gateway compiler
alias(
    name = "grpc_gateway_proto_compiler",
    actual = "@com_github_grpc_ecosystem_grpc_gateway_v2//protoc-gen-grpc-gateway:go_gen_grpc_gateway",
    visibility = ["//visibility:public"],
)

gometalinter(
    name = "gometalinter",
    config = "//:.gometalinter.json",
    paths = [
        "./...",
    ],
    prefix = prefix,
)

goimports(
    name = "goimports",
    display_diffs = True,
    prefix = prefix,
    write = False,
)

workspace_binary(
    name = "golint",
    cmd = "@com_github_golang_lint//golint",
)

nogo(
    name = "nogo",
    config = "nogo_config.json",
    visibility = ["//visibility:public"],
    deps = [
        "@org_golang_x_tools//go/analysis/passes/unsafeptr:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/unreachable:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/unmarshal:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/tests:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/structtag:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/stdmethods:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/shift:go_default_library",
        # "@org_golang_x_tools//go/analysis/passes/shadow:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/printf:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/pkgfact:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/nilness:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/nilfunc:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/loopclosure:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/httpresponse:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/findcall:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/deepequalerrors:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/ctrlflow:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/copylock:go_default_library",
        #  "@org_golang_x_tools//go/analysis/passes/cgocall:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/buildtag:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/buildssa:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/bools:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/atomicalign:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/atomic:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/assign:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/inspect:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/asmdecl:go_default_library",
        "//tools/analyzers/comparesame:go_default_library",
        "//tools/analyzers/cryptorand:go_default_library",
        "//tools/analyzers/errcheck:go_default_library",
        "//tools/analyzers/featureconfig:go_default_library",
        "//tools/analyzers/gocognit:go_default_library",
        "//tools/analyzers/ineffassign:go_default_library",
        "//tools/analyzers/interfacechecker:go_default_library",
        "//tools/analyzers/logruswitherror:go_default_library",
        "//tools/analyzers/maligned:go_default_library",
        "//tools/analyzers/nop:go_default_library",
        "//tools/analyzers/properpermissions:go_default_library",
        "//tools/analyzers/recursivelock:go_default_library",
        "//tools/analyzers/shadowpredecl:go_default_library",
        "//tools/analyzers/slicedirect:go_default_library",
        "//tools/analyzers/uintcast:go_default_library",
    ] + select({
        # nogo checks that fail with coverage enabled.
        ":coverage_enabled": [],
        "//conditions:default": [
            "@org_golang_x_tools//go/analysis/passes/composite:go_default_library",
            "@org_golang_x_tools//go/analysis/passes/lostcancel:go_default_library",
        ],
    }),
)

config_setting(
    name = "coverage_enabled",
    values = {"define": "coverage_enabled=1"},
)

common_files = {
    "//:LICENSE.md": "LICENSE.md",
    "//:README.md": "README.md",
}

sh_binary(
    name = "prysm_sh",
    srcs = ["prysm.sh"],
    visibility = ["//visibility:public"],
)
