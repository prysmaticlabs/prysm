// Code generated by MockGen. DO NOT EDIT.
// Source: validator/client/beacon-api/duties.go
//
// Generated by this command:
//
//	mockgen -package=mock -source=validator/client/beacon-api/duties.go -destination=validator/client/beacon-api/mock/duties_mock.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	structs "github.com/prysmaticlabs/prysm/v5/api/server/structs"
	primitives "github.com/prysmaticlabs/prysm/v5/consensus-types/primitives"
	gomock "go.uber.org/mock/gomock"
)

// MockdutiesProvider is a mock of dutiesProvider interface.
type MockdutiesProvider struct {
	ctrl     *gomock.Controller
	recorder *MockdutiesProviderMockRecorder
}

// MockdutiesProviderMockRecorder is the mock recorder for MockdutiesProvider.
type MockdutiesProviderMockRecorder struct {
	mock *MockdutiesProvider
}

// NewMockdutiesProvider creates a new mock instance.
func NewMockdutiesProvider(ctrl *gomock.Controller) *MockdutiesProvider {
	mock := &MockdutiesProvider{ctrl: ctrl}
	mock.recorder = &MockdutiesProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdutiesProvider) EXPECT() *MockdutiesProviderMockRecorder {
	return m.recorder
}

// AttesterDuties mocks base method.
func (m *MockdutiesProvider) AttesterDuties(ctx context.Context, epoch primitives.Epoch, validatorIndices []primitives.ValidatorIndex) ([]*structs.AttesterDuty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttesterDuties", ctx, epoch, validatorIndices)
	ret0, _ := ret[0].([]*structs.AttesterDuty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttesterDuties indicates an expected call of AttesterDuties.
func (mr *MockdutiesProviderMockRecorder) AttesterDuties(ctx, epoch, validatorIndices any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttesterDuties", reflect.TypeOf((*MockdutiesProvider)(nil).AttesterDuties), ctx, epoch, validatorIndices)
}

// Committees mocks base method.
func (m *MockdutiesProvider) Committees(ctx context.Context, epoch primitives.Epoch) ([]*structs.Committee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Committees", ctx, epoch)
	ret0, _ := ret[0].([]*structs.Committee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Committees indicates an expected call of Committees.
func (mr *MockdutiesProviderMockRecorder) Committees(ctx, epoch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Committees", reflect.TypeOf((*MockdutiesProvider)(nil).Committees), ctx, epoch)
}

// ProposerDuties mocks base method.
func (m *MockdutiesProvider) ProposerDuties(ctx context.Context, epoch primitives.Epoch) ([]*structs.ProposerDuty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProposerDuties", ctx, epoch)
	ret0, _ := ret[0].([]*structs.ProposerDuty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProposerDuties indicates an expected call of ProposerDuties.
func (mr *MockdutiesProviderMockRecorder) ProposerDuties(ctx, epoch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposerDuties", reflect.TypeOf((*MockdutiesProvider)(nil).ProposerDuties), ctx, epoch)
}

// SyncDuties mocks base method.
func (m *MockdutiesProvider) SyncDuties(ctx context.Context, epoch primitives.Epoch, validatorIndices []primitives.ValidatorIndex) ([]*structs.SyncCommitteeDuty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncDuties", ctx, epoch, validatorIndices)
	ret0, _ := ret[0].([]*structs.SyncCommitteeDuty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncDuties indicates an expected call of SyncDuties.
func (mr *MockdutiesProviderMockRecorder) SyncDuties(ctx, epoch, validatorIndices any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncDuties", reflect.TypeOf((*MockdutiesProvider)(nil).SyncDuties), ctx, epoch, validatorIndices)
}
