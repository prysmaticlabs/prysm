// Code generated by MockGen. DO NOT EDIT.
// Source: validator/client/beacon-api/beacon_block_converter.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	apimiddleware "github.com/prysmaticlabs/prysm/v4/beacon-chain/rpc/apimiddleware"
	eth "github.com/prysmaticlabs/prysm/v4/proto/prysm/v1alpha1"
)

// MockbeaconBlockConverter is a mock of beaconBlockConverter interface.
type MockbeaconBlockConverter struct {
	ctrl     *gomock.Controller
	recorder *MockbeaconBlockConverterMockRecorder
}

// MockbeaconBlockConverterMockRecorder is the mock recorder for MockbeaconBlockConverter.
type MockbeaconBlockConverterMockRecorder struct {
	mock *MockbeaconBlockConverter
}

// NewMockbeaconBlockConverter creates a new mock instance.
func NewMockbeaconBlockConverter(ctrl *gomock.Controller) *MockbeaconBlockConverter {
	mock := &MockbeaconBlockConverter{ctrl: ctrl}
	mock.recorder = &MockbeaconBlockConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbeaconBlockConverter) EXPECT() *MockbeaconBlockConverterMockRecorder {
	return m.recorder
}

// ConvertRESTAltairBlockToProto mocks base method.
func (m *MockbeaconBlockConverter) ConvertRESTAltairBlockToProto(block *apimiddleware.BeaconBlockAltairJson) (*eth.BeaconBlockAltair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertRESTAltairBlockToProto", block)
	ret0, _ := ret[0].(*eth.BeaconBlockAltair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertRESTAltairBlockToProto indicates an expected call of ConvertRESTAltairBlockToProto.
func (mr *MockbeaconBlockConverterMockRecorder) ConvertRESTAltairBlockToProto(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertRESTAltairBlockToProto", reflect.TypeOf((*MockbeaconBlockConverter)(nil).ConvertRESTAltairBlockToProto), block)
}

// ConvertRESTBellatrixBlockToProto mocks base method.
func (m *MockbeaconBlockConverter) ConvertRESTBellatrixBlockToProto(block *apimiddleware.BeaconBlockBellatrixJson) (*eth.BeaconBlockBellatrix, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertRESTBellatrixBlockToProto", block)
	ret0, _ := ret[0].(*eth.BeaconBlockBellatrix)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertRESTBellatrixBlockToProto indicates an expected call of ConvertRESTBellatrixBlockToProto.
func (mr *MockbeaconBlockConverterMockRecorder) ConvertRESTBellatrixBlockToProto(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertRESTBellatrixBlockToProto", reflect.TypeOf((*MockbeaconBlockConverter)(nil).ConvertRESTBellatrixBlockToProto), block)
}

// ConvertRESTCapellaBlockToProto mocks base method.
func (m *MockbeaconBlockConverter) ConvertRESTCapellaBlockToProto(block *apimiddleware.BeaconBlockCapellaJson) (*eth.BeaconBlockCapella, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertRESTCapellaBlockToProto", block)
	ret0, _ := ret[0].(*eth.BeaconBlockCapella)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertRESTCapellaBlockToProto indicates an expected call of ConvertRESTCapellaBlockToProto.
func (mr *MockbeaconBlockConverterMockRecorder) ConvertRESTCapellaBlockToProto(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertRESTCapellaBlockToProto", reflect.TypeOf((*MockbeaconBlockConverter)(nil).ConvertRESTCapellaBlockToProto), block)
}

// ConvertRESTPhase0BlockToProto mocks base method.
func (m *MockbeaconBlockConverter) ConvertRESTPhase0BlockToProto(block *apimiddleware.BeaconBlockJson) (*eth.BeaconBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertRESTPhase0BlockToProto", block)
	ret0, _ := ret[0].(*eth.BeaconBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertRESTPhase0BlockToProto indicates an expected call of ConvertRESTPhase0BlockToProto.
func (mr *MockbeaconBlockConverterMockRecorder) ConvertRESTPhase0BlockToProto(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertRESTPhase0BlockToProto", reflect.TypeOf((*MockbeaconBlockConverter)(nil).ConvertRESTPhase0BlockToProto), block)
}
