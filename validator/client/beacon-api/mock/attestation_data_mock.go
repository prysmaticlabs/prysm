// Code generated by MockGen. DO NOT EDIT.
// Source: validator/client/beacon-api/attestation_data.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/prysmaticlabs/prysm/v3/consensus-types/primitives"
	eth "github.com/prysmaticlabs/prysm/v3/proto/prysm/v1alpha1"
)

// MockattestationDataProvider is a mock of attestationDataProvider interface.
type MockattestationDataProvider struct {
	ctrl     *gomock.Controller
	recorder *MockattestationDataProviderMockRecorder
}

// MockattestationDataProviderMockRecorder is the mock recorder for MockattestationDataProvider.
type MockattestationDataProviderMockRecorder struct {
	mock *MockattestationDataProvider
}

// NewMockattestationDataProvider creates a new mock instance.
func NewMockattestationDataProvider(ctrl *gomock.Controller) *MockattestationDataProvider {
	mock := &MockattestationDataProvider{ctrl: ctrl}
	mock.recorder = &MockattestationDataProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockattestationDataProvider) EXPECT() *MockattestationDataProviderMockRecorder {
	return m.recorder
}

// GetAttestationData mocks base method.
func (m *MockattestationDataProvider) GetAttestationData(slot types.Slot, committeeIndex types.CommitteeIndex) (*eth.AttestationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttestationData", slot, committeeIndex)
	ret0, _ := ret[0].(*eth.AttestationData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttestationData indicates an expected call of GetAttestationData.
func (mr *MockattestationDataProviderMockRecorder) GetAttestationData(slot, committeeIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttestationData", reflect.TypeOf((*MockattestationDataProvider)(nil).GetAttestationData), slot, committeeIndex)
}
