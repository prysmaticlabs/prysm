// Code generated by MockGen. DO NOT EDIT.
// Source: validator/client/beacon-api/state_validators.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	apimiddleware "github.com/prysmaticlabs/prysm/v3/beacon-chain/rpc/apimiddleware"
)

// MockstateValidatorsProvider is a mock of stateValidatorsProvider interface.
type MockstateValidatorsProvider struct {
	ctrl     *gomock.Controller
	recorder *MockstateValidatorsProviderMockRecorder
}

// MockstateValidatorsProviderMockRecorder is the mock recorder for MockstateValidatorsProvider.
type MockstateValidatorsProviderMockRecorder struct {
	mock *MockstateValidatorsProvider
}

// NewMockstateValidatorsProvider creates a new mock instance.
func NewMockstateValidatorsProvider(ctrl *gomock.Controller) *MockstateValidatorsProvider {
	mock := &MockstateValidatorsProvider{ctrl: ctrl}
	mock.recorder = &MockstateValidatorsProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockstateValidatorsProvider) EXPECT() *MockstateValidatorsProviderMockRecorder {
	return m.recorder
}

// GetStateValidators mocks base method.
func (m *MockstateValidatorsProvider) GetStateValidators(arg0 context.Context, arg1 []string, arg2 []int64, arg3 []string) (*apimiddleware.StateValidatorsResponseJson, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateValidators", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*apimiddleware.StateValidatorsResponseJson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateValidators indicates an expected call of GetStateValidators.
func (mr *MockstateValidatorsProviderMockRecorder) GetStateValidators(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateValidators", reflect.TypeOf((*MockstateValidatorsProvider)(nil).GetStateValidators), arg0, arg1, arg2, arg3)
}
