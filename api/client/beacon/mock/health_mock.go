// Code generated by MockGen. DO NOT EDIT.
// Source: api/client/beacon/iface/health.go
//
// Generated by this command:
//
//	mockgen -package=mock -source=api/client/beacon/iface/health.go -destination=api/client/beacon/mock/health_mock.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHealthProvider is a mock of HealthProvider interface.
type MockHealthProvider struct {
	ctrl     *gomock.Controller
	recorder *MockHealthProviderMockRecorder
}

// MockHealthProviderMockRecorder is the mock recorder for MockHealthProvider.
type MockHealthProviderMockRecorder struct {
	mock *MockHealthProvider
}

// NewMockHealthProvider creates a new mock instance.
func NewMockHealthProvider(ctrl *gomock.Controller) *MockHealthProvider {
	mock := &MockHealthProvider{ctrl: ctrl}
	mock.recorder = &MockHealthProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthProvider) EXPECT() *MockHealthProviderMockRecorder {
	return m.recorder
}

// IsHealthy mocks base method.
func (m *MockHealthProvider) IsHealthy(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsHealthy", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsHealthy indicates an expected call of IsHealthy.
func (mr *MockHealthProviderMockRecorder) IsHealthy(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsHealthy", reflect.TypeOf((*MockHealthProvider)(nil).IsHealthy), ctx)
}

// MockHealthTracker is a mock of HealthTracker interface.
type MockHealthTracker struct {
	ctrl     *gomock.Controller
	recorder *MockHealthTrackerMockRecorder
}

// MockHealthTrackerMockRecorder is the mock recorder for MockHealthTracker.
type MockHealthTrackerMockRecorder struct {
	mock *MockHealthTracker
}

// NewMockHealthTracker creates a new mock instance.
func NewMockHealthTracker(ctrl *gomock.Controller) *MockHealthTracker {
	mock := &MockHealthTracker{ctrl: ctrl}
	mock.recorder = &MockHealthTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthTracker) EXPECT() *MockHealthTrackerMockRecorder {
	return m.recorder
}

// IsHealthy mocks base method.
func (m *MockHealthTracker) IsHealthy() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsHealthy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsHealthy indicates an expected call of IsHealthy.
func (mr *MockHealthTrackerMockRecorder) IsHealthy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsHealthy", reflect.TypeOf((*MockHealthTracker)(nil).IsHealthy))
}
