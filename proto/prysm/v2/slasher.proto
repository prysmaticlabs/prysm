syntax = "proto3";

package ethereum.prysm.v2;

import "proto/eth/ext/options.proto";
import "proto/prysm/v1alpha1/beacon_block.proto";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

option csharp_namespace = "Ethereum.Prysm.V2";
option go_package = "github.com/prysmaticlabs/prysm/proto/prysm/v2;v2";
option java_multiple_files = true;
option java_outer_classname = "SlasherProto";
option java_package = "org.ethereum.prysm.v2";
option php_namespace = "Ethereum\\Prysm\\v2";

// Slasher service API
//
// Slasher service provides an interface for checking if attestations or blocks are slashable.
service Slasher {
  // Returns any found attester slashings for an input indexed attestation.
  rpc IsSlashableAttestation(ethereum.eth.v1alpha1.IndexedAttestation) returns (AttesterSlashingResponse) {
    option (google.api.http) = {
      post: "/eth/v1alpha1/slasher/attestations/slashable",
      body: "*"
    };
  }

  // Returns any found proposer slashings for an input signed block header.
  rpc IsSlashableBlock(ethereum.eth.v1alpha1.SignedBeaconBlockHeader) returns (ProposerSlashingResponse) {
    option (google.api.http) = {
      get: "/eth/v1alpha1/slasher/blocks/slashable"
    };
  }

  // Returns the highest source and target attestation for validator indices that have been observed by slasher.
  rpc HighestAttestations(HighestAttestationRequest) returns (HighestAttestationResponse) {
    option (google.api.http) = {
      get: "/eth/v1alpha1/slasher/attestations/highest"
    };
  }
}

message AttesterSlashingResponse {
  ethereum.eth.v1alpha1.AttesterSlashing attester_slashing = 1;
}

message ProposerSlashingResponse {
  ethereum.eth.v1alpha1.ProposerSlashing proposer_slashing = 1;
}

message HighestAttestationRequest {
  repeated uint64 validator_indices = 1;
}

message HighestAttestationResponse {
  repeated HighestAttestation attestations = 1;
}

message HighestAttestation {
  uint64 validator_index = 1;
  uint64 highest_source_epoch = 2 [(ethereum.eth.ext.cast_type) = "github.com/prysmaticlabs/eth2-types.Epoch"];
  uint64 highest_target_epoch = 3 [(ethereum.eth.ext.cast_type) = "github.com/prysmaticlabs/eth2-types.Epoch"];
}
