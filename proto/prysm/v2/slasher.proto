// Copyright 2021 Prysmatic Labs.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package ethereum.prysm.v2;

import "proto/eth/ext/options.proto";
import "proto/prysm/v1alpha1/beacon_block.proto";

import "google/api/annotations.proto";

option csharp_namespace = "Ethereum.Prysm.V2";
option go_package = "github.com/prysmaticlabs/prysm/proto/prysm/v2;v2";
option java_multiple_files = true;
option java_outer_classname = "SlasherProto";
option java_package = "org.ethereum.prysm.v2";
option php_namespace = "Ethereum\\Prysm\\v2";

// Slasher service API
//
// Slasher service provides an interface for checking if attestations or blocks
// are slashable.
service Slasher {
  // Returns any found attester slashings for an input indexed attestation.
  rpc IsSlashableAttestation(ethereum.eth.v1alpha1.IndexedAttestation)
      returns (AttesterSlashingResponse) {
    option (google.api.http) = {
      post : "/eth/v1alpha1/slasher/attestations/slashable",
      body : "*"
    };
  }

  // Returns any found proposer slashings for an input signed block header.
  rpc IsSlashableBlock(ethereum.eth.v1alpha1.SignedBeaconBlockHeader)
      returns (ProposerSlashingResponse) {
    option (google.api.http) = {
      get : "/eth/v1alpha1/slasher/blocks/slashable"
    };
  }

  // Returns if a given indexed attestation could be slashable when compared to
  // the slashers history for the attesters. This function is read-only, and
  // does not need the indexed attestation to be signed.
  rpc IsSlashableAttestationNoUpdate(ethereum.eth.v1alpha1.IndexedAttestation)
      returns (Slashable) {
    option deprecated = true;
  };

  // Returns if a given beacon block header could be slashable when compared to
  // the slashers history for the proposer. This function is read-only, and does
  // not need the beacon block header to be signed.
  rpc IsSlashableBlockNoUpdate(ethereum.eth.v1alpha1.BeaconBlockHeader)
      returns (Slashable) {
    option deprecated = true;
  };

  // Returns the highest source and target attestation for validator indices
  // that have been observed by slasher.
  rpc HighestAttestations(HighestAttestationRequest)
      returns (HighestAttestationResponse) {
    option (google.api.http) = {
      get : "/eth/v1alpha1/slasher/attestations/highest"
    };
  }
}

message AttesterSlashingResponse {
  repeated ethereum.eth.v1alpha1.AttesterSlashing attester_slashings = 1;
}

message ProposerSlashingResponse {
  repeated ethereum.eth.v1alpha1.ProposerSlashing proposer_slashings = 1;
}

message HighestAttestationRequest { repeated uint64 validator_indices = 1; }

message HighestAttestationResponse {
  repeated HighestAttestation attestations = 1;
}

message HighestAttestation {
  uint64 validator_index = 1;
  uint64 highest_source_epoch = 2
      [ (ethereum.eth.ext.cast_type) =
            "github.com/prysmaticlabs/eth2-types.Epoch" ];
  uint64 highest_target_epoch = 3
      [ (ethereum.eth.ext.cast_type) =
            "github.com/prysmaticlabs/eth2-types.Epoch" ];
}

// ProposalHistory defines the structure for recording a validator's historical
// proposals. Using a bitlist to represent the epochs and an uint64 to mark the
// latest marked epoch of the bitlist, we can easily store which epochs a
// validator has proposed a block for while pruning the older data.
message ProposalHistory {
  bytes epoch_bits = 1 [
    (ethereum.eth.ext.cast_type) =
        "github.com/prysmaticlabs/go-bitfield.Bitlist",
    deprecated = true
  ];
  uint64 latest_epoch_written = 2 [
    (ethereum.eth.ext.cast_type) = "github.com/prysmaticlabs/eth2-types.Epoch",
    deprecated = true
  ];
}

message Slashable { bool slashable = 1 [ deprecated = true ]; }

// AttestationHistory defines the structure for recording a validator's
// historical attestation. Using a map[uint64]uint64 to map its target epoch to
// its source epoch, in order to detect if a vote being created is not a double
// vote and surrounded by, or surrounding any other votes. Using an uint64 to
// mark the latest written epoch, we can safely perform a rolling prune whenever
// the history is updated.
message AttestationHistory {
  map<uint64, uint64> target_to_source = 1 [ deprecated = true ];
  uint64 latest_epoch_written = 2 [
    (ethereum.eth.ext.cast_type) = "github.com/prysmaticlabs/eth2-types.Epoch",
    deprecated = true
  ];
}
