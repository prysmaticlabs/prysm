// Copyright 2021 Prysmatic Labs.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package ethereum.prysm.v2;

import "proto/eth/ext/options.proto";

import "proto/prysm/v1alpha1/beacon_block.proto";
import "proto/prysm/v1alpha1/attestation.proto";

option csharp_namespace = "Ethereum.Prysm.V2";
option go_package = "github.com/prysmaticlabs/prysm/proto/prysm/v2;v2";
option java_multiple_files = true;
option java_outer_classname = "BeaconBlockProto";
option java_package = "org.ethereum.prysm.v2";
option php_namespace = "Ethereum\\Prysm\\v2";

// The signed version of a (HF1) beacon block.
message SignedBeaconBlockAltair {
  // The unsigned beacon block itself.
  BeaconBlockAltair block = 1;

  // 96 byte BLS signature from the validator that produced this block.
  bytes signature = 2 [(ethereum.eth.ext.ssz_size) = "96"];
}

// The unsigned version of a (HF1) beacon block. The message does not contain a validator signature.
message BeaconBlockAltair {
  // Beacon chain slot that this block represents.
  uint64 slot = 1 [(ethereum.eth.ext.cast_type) = "github.com/prysmaticlabs/eth2-types.Slot"];

  // Validator index of the validator that proposed the block header.
  uint64 proposer_index = 2 [(ethereum.eth.ext.cast_type) = "github.com/prysmaticlabs/eth2-types.ValidatorIndex"];

  // 32 byte root of the parent block.
  bytes parent_root = 3 [(ethereum.eth.ext.ssz_size) = "32"];

  // 32 byte root of the resulting state after processing this block.
  bytes state_root = 4 [(ethereum.eth.ext.ssz_size) = "32"];

  // The  beacon block body.
  BeaconBlockBodyAltair body = 5;
}

// The block body of an (HF1) beacon block.
// The new addition for  is SyncAggregate for light client support.
message BeaconBlockBodyAltair {
  // The validators RANDAO reveal 96 byte value.
  bytes randao_reveal = 1 [(ethereum.eth.ext.ssz_size) = "96"];

  // A reference to the Ethereum 1.x chain.
  ethereum.eth.v1alpha1.Eth1Data eth1_data = 2;

  // 32 byte field of arbitrary data. This field may contain any data and
  // is not used for anything other than a fun message.
  bytes graffiti = 3 [(ethereum.eth.ext.ssz_size) = "32"];

  // Block operations
  // Refer to spec constants at https://github.com/ethereum/eth2.0-specs/blob/dev/specs/core/0_beacon-chain.md#max-operations-per-block

  // At most MAX_PROPOSER_SLASHINGS.
  repeated ethereum.eth.v1alpha1.ProposerSlashing proposer_slashings = 4 [(ethereum.eth.ext.ssz_max) = "16"];

  // At most MAX_ATTESTER_SLASHINGS.
  repeated ethereum.eth.v1alpha1.AttesterSlashing attester_slashings = 5 [(ethereum.eth.ext.ssz_max) = "2"];

  // At most MAX_ATTESTATIONS.
  repeated ethereum.eth.v1alpha1.Attestation attestations = 6 [(ethereum.eth.ext.ssz_max) = "128"];

  // At most MAX_DEPOSITS.
  repeated ethereum.eth.v1alpha1.Deposit deposits = 7 [(ethereum.eth.ext.ssz_max) = "16"];

  // At most MAX_VOLUNTARY_EXITS.
  repeated ethereum.eth.v1alpha1.SignedVoluntaryExit voluntary_exits = 8 [(ethereum.eth.ext.ssz_max) = "16"];

  // Sync aggregate object to track sync committee votes for light client support. [New in ]
  SyncAggregate sync_aggregate = 9;
}

// The sync aggregate object for the beacon chain to track sync committee votes and to
// support light client infra.
message SyncAggregate {
  // Sync committee bits as Bitvector to track votes.
  bytes sync_committee_bits = 1 [(ethereum.eth.ext.ssz_size) = "sync_committee_bytes.size", (ethereum.eth.ext.cast_type) = "sync_committee_bits.type"];

  // BLS aggregated signature of the sync committee for the ones that voted.
  bytes sync_committee_signature = 2 [(ethereum.eth.ext.ssz_size) = "96"];
}
