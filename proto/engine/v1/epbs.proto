// Copyright 2024 Prysmatic Labs.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package ethereum.engine.v1;

import "proto/eth/ext/options.proto";
import "proto/engine/v1/execution_engine.proto";

option csharp_namespace = "Ethereum.Engine.V1";
option go_package = "github.com/prysmaticlabs/prysm/v5/proto/engine/v1;enginev1";
option java_multiple_files = true;
option java_outer_classname = "ExecutionEngineProto";
option java_package = "org.ethereum.engine.v1";
option php_namespace = "Ethereum\\Engine\\v1";


message PayloadAttestationData {
	bytes beacon_block_root = 1 [(ethereum.eth.ext.ssz_size) = "32"];
	uint64 slot 		= 2 [(ethereum.eth.ext.cast_type) = "github.com/prysmaticlabs/prysm/v5/consensus-types/primitives.Slot"];
	uint64 payload_status 	= 3 [(ethereum.eth.ext.cast_type) = "github.com/prysmaticlabs/prysm/v5/consensus-types/primitives.PTCStatus"];
}

message PayloadAttestation {
  	bytes aggregation_bits          = 1 [(ethereum.eth.ext.ssz_size) = "ptc.size", (ethereum.eth.ext.cast_type) = "ptc.type"];
	PayloadAttestationData data 	= 2;
    	bytes signature 		= 3 [(ethereum.eth.ext.ssz_size) = "96"];
}

message PayloadAttestationMessage {
	uint64 validator_index 		= 1 [(ethereum.eth.ext.cast_type) = "github.com/prysmaticlabs/prysm/v5/consensus-types/primitives.ValidatorIndex"];
	PayloadAttestationData data 	= 2;
    	bytes signature 		= 3 [(ethereum.eth.ext.ssz_size) = "96"];
}

message InclusionListSummary {
	uint64 proposer_index  = 1 [(ethereum.eth.ext.cast_type) = "github.com/prysmaticlabs/prysm/v5/consensus-types/primitives.ValidatorIndex"];
	uint64 slot 	       = 2 [(ethereum.eth.ext.cast_type) = "github.com/prysmaticlabs/prysm/v5/consensus-types/primitives.Slot"];
	repeated bytes summary = 3 [(ethereum.eth.ext.ssz_size) = "?,20", (ethereum.eth.ext.ssz_max) = "max_inclusion_list.size"];
}

message SignedInclusionListSummary {
	InclusionListSummary message = 1;
    	bytes signature 	     = 2 [(ethereum.eth.ext.ssz_size) = "96"];
}

message InclusionList {
	SignedInclusionListSummary signed_summary = 1;
	bytes parent_block_hash       		  = 2 [(ethereum.eth.ext.ssz_size) = "32"];
	repeated bytes transactions 	   	  = 3 [(ethereum.eth.ext.ssz_size) = "?,?", (ethereum.eth.ext.ssz_max)  = "max_inclusion_list.size,1073741824"];
}

message ExecutionPayloadHeaderEPBS {
	bytes parent_block_hash       	= 1 [(ethereum.eth.ext.ssz_size) = "32"];
	bytes parent_block_root       	= 2 [(ethereum.eth.ext.ssz_size) = "32"];
	bytes block_hash	       	= 3 [(ethereum.eth.ext.ssz_size) = "32"];
	uint64 builder_index 		= 4 [(ethereum.eth.ext.cast_type) = "github.com/prysmaticlabs/prysm/v5/consensus-types/primitives.ValidatorIndex"];
	uint64 slot     		= 5 [(ethereum.eth.ext.cast_type) = "github.com/prysmaticlabs/prysm/v5/consensus-types/primitives.Slot"];
	uint64 value        		= 6;
	bytes blob_kzg_commitments_root = 7 [(ethereum.eth.ext.ssz_size) = "32"];
}

message ExecutionPayloadEPBS {
	bytes parent_hash                                         = 1 [(ethereum.eth.ext.ssz_size) = "32"];
	bytes fee_recipient                                       = 2 [(ethereum.eth.ext.ssz_size) = "20"];
	bytes state_root                                          = 3 [(ethereum.eth.ext.ssz_size) = "32"];
	bytes receipts_root                                       = 4 [(ethereum.eth.ext.ssz_size) = "32"];
	bytes logs_bloom                                          = 5 [(ethereum.eth.ext.ssz_size) = "logs_bloom.size"];
	bytes prev_randao                                         = 6 [(ethereum.eth.ext.ssz_size) = "32"];
	uint64 block_number                                       = 7;
	uint64 gas_limit                                          = 8;
	uint64 gas_used                                           = 9;
	uint64 timestamp                                          = 10;
	bytes extra_data                                          = 11 [(ethereum.eth.ext.ssz_max) = "extra_data.size"];
	bytes base_fee_per_gas                                    = 12 [(ethereum.eth.ext.ssz_size) = "32"];
	bytes block_hash                                          = 13 [(ethereum.eth.ext.ssz_size) = "32"];
	repeated bytes transactions     			  = 14 [(ethereum.eth.ext.ssz_size) = "?,?", (ethereum.eth.ext.ssz_max)  = "1048576,1073741824"];
	repeated Withdrawal withdrawals 			  = 15 [(ethereum.eth.ext.ssz_max) = "withdrawal.size"];
	uint64 blob_gas_used  					  = 16;
	uint64 excess_blob_gas  				  = 17;
	repeated bytes inclusion_list_summary 			  = 18 [(ethereum.eth.ext.ssz_size)
= "?,20", (ethereum.eth.ext.ssz_max) = "max_inclusion_list.size"];
}

message SignedExecutionPayloadHeader{
	ExecutionPayloadHeader 	message  = 1;
    	bytes signature 	  	 = 2 [(ethereum.eth.ext.ssz_size) = "96"];
}

message ExecutionPayloadEnvelope {
	ExecutionPayloadEPBS payload 		= 1;
	uint64 builder_index 	     		= 2 [(ethereum.eth.ext.cast_type) = "github.com/prysmaticlabs/prysm/v5/consensus-types/primitives.ValidatorIndex"];
    	bytes beacon_block_root 		= 3 [(ethereum.eth.ext.ssz_size) = "32"];
    	repeated bytes blob_kzg_commitments 	= 4 [(ethereum.eth.ext.ssz_size) = "?,48", (ethereum.eth.ext.ssz_max)  = "max_blob_commitments.size"];
	uint64 inclusion_list_proposer_index   	= 5 [(ethereum.eth.ext.cast_type) = "github.com/prysmaticlabs/prysm/v5/consensus-types/primitives.ValidatorIndex"];
	uint64 inclusion_list_slot 		= 6 [(ethereum.eth.ext.cast_type) = "github.com/prysmaticlabs/prysm/v5/consensus-types/primitives.Slot"];
    	bytes inclusion_list_signature 		= 7 [(ethereum.eth.ext.ssz_size) = "96"];
	bool payload_withheld 			= 8;
    	bytes state_root 			= 9 [(ethereum.eth.ext.ssz_size) = "32"];
}

message SignedExecutionPayloadEnvelope {
	ExecutionPayloadEnvelope message = 1;
    	bytes signature 		 = 2 [(ethereum.eth.ext.ssz_size) = "96"];
}
