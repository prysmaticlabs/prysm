// Copyright 2024 Prysmatic Labs.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package ethereum.engine.v1;

import "proto/eth/ext/options.proto";
import "proto/engine/v1/execution_engine.proto";

option csharp_namespace = "Ethereum.Engine.V1";
option go_package = "github.com/prysmaticlabs/prysm/v5/proto/engine/v1;enginev1";
option java_multiple_files = true;
option java_outer_classname = "ExecutionEngineProto";
option java_package = "org.ethereum.engine.v1";
option php_namespace = "Ethereum\\Engine\\v1";

message ExecutionPayloadHeaderEPBS {
	bytes parent_block_hash       	= 1 [(ethereum.eth.ext.ssz_size) = "32"];
	bytes parent_block_root       	= 2 [(ethereum.eth.ext.ssz_size) = "32"];
	bytes block_hash	       	= 3 [(ethereum.eth.ext.ssz_size) = "32"];
	uint64 gas_limit       		= 4;
	uint64 builder_index 		= 5 [(ethereum.eth.ext.cast_type) = "github.com/prysmaticlabs/prysm/v5/consensus-types/primitives.ValidatorIndex"];
	uint64 slot     		= 6 [(ethereum.eth.ext.cast_type) = "github.com/prysmaticlabs/prysm/v5/consensus-types/primitives.Slot"];
	uint64 value        		= 7;
	bytes blob_kzg_commitments_root = 8 [(ethereum.eth.ext.ssz_size) = "32"];
}

message SignedExecutionPayloadHeader{
	ExecutionPayloadHeaderEPBS 	message  = 1;
    	bytes signature 	  	 = 2 [(ethereum.eth.ext.ssz_size) = "96"];
}

message ExecutionPayloadEnvelope {
	ExecutionPayloadElectra payload 		= 1;
	uint64 builder_index 	     		= 2 [(ethereum.eth.ext.cast_type) = "github.com/prysmaticlabs/prysm/v5/consensus-types/primitives.ValidatorIndex"];
    	bytes beacon_block_root 		= 3 [(ethereum.eth.ext.ssz_size) = "32"];
    	repeated bytes blob_kzg_commitments 	= 4 [(ethereum.eth.ext.ssz_size) = "?,48", (ethereum.eth.ext.ssz_max)  = "max_blob_commitments.size"];
	bool payload_withheld 			= 8;
    	bytes state_root 			= 9 [(ethereum.eth.ext.ssz_size) = "32"];
}

message SignedExecutionPayloadEnvelope {
	ExecutionPayloadEnvelope message = 1;
    	bytes signature 		 = 2 [(ethereum.eth.ext.ssz_size) = "96"];
}
