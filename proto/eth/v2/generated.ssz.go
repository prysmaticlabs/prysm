// Code generated by fastssz. DO NOT EDIT.
// Hash: dc2f400792315f1562b2c293abd0ba12a1fe061d95afe7688376eb4623356911
package eth

import (
	ssz "github.com/ferranbt/fastssz"
	v1alpha1 "github.com/prysmaticlabs/prysm/proto/prysm/v1alpha1"
)

// MarshalSSZ ssz marshals the BeaconBlockContainerV2 object
func (b *BeaconBlockContainerV2) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BeaconBlockContainerV2 object to a target array
func (b *BeaconBlockContainerV2) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(100)

	// Offset (0) 'Message'
	dst = ssz.WriteOffset(dst, offset)
	if b.Message == nil {
		b.Message = new(v1alpha1.BeaconBlockAltair)
	}
	offset += b.Message.SizeSSZ()

	// Field (1) 'Signature'
	if len(b.Signature) != 96 {
		err = ssz.ErrBytesLength
		return
	}
	dst = append(dst, b.Signature...)

	// Field (0) 'Message'
	if dst, err = b.Message.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the BeaconBlockContainerV2 object
func (b *BeaconBlockContainerV2) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 100 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Message'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 100 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Signature'
	if cap(b.Signature) == 0 {
		b.Signature = make([]byte, 0, len(buf[4:100]))
	}
	b.Signature = append(b.Signature, buf[4:100]...)

	// Field (0) 'Message'
	{
		buf = tail[o0:]
		if b.Message == nil {
			b.Message = new(v1alpha1.BeaconBlockAltair)
		}
		if err = b.Message.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BeaconBlockContainerV2 object
func (b *BeaconBlockContainerV2) SizeSSZ() (size int) {
	size = 100

	// Field (0) 'Message'
	if b.Message == nil {
		b.Message = new(v1alpha1.BeaconBlockAltair)
	}
	size += b.Message.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the BeaconBlockContainerV2 object
func (b *BeaconBlockContainerV2) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BeaconBlockContainerV2 object with a hasher
func (b *BeaconBlockContainerV2) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Message'
	if err = b.Message.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Signature'
	if len(b.Signature) != 96 {
		err = ssz.ErrBytesLength
		return
	}
	hh.PutBytes(b.Signature)

	hh.Merkleize(indx)
	return
}
