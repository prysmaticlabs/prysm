// Copyright 2020 Prysmatic Labs.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package ethereum.eth.service;

import "google/api/annotations.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/empty.proto";

import "proto/eth/v1/beacon_chain.proto";
import "proto/eth/v2/beacon_state.proto";
import "proto/eth/v2/ssz.proto";

option csharp_namespace = "Ethereum.Eth.Service";
option go_package = "github.com/prysmaticlabs/prysm/v4/proto/eth/service";
option java_multiple_files = true;
option java_outer_classname = "BeaconDebugServiceProto";
option java_package = "org.ethereum.eth.service";
option php_namespace = "Ethereum\\Eth\\Service";

// Beacon chain debug API
//
// The beacon chain debug API is a set of endpoints to debug chain and shouldn't be exposed publicly.
//
// This service is defined in the upstream Ethereum consensus APIs repository (beacon-apis/apis/debug).
service BeaconDebug {
  // GetBeaconStateSSZ returns the SSZ-serialized version of the full BeaconState object for given stateId.
  //
  // Spec: https://ethereum.github.io/beacon-APIs/?urls.primaryName=v2.3.0#/Debug/getState
  rpc GetBeaconStateSSZ(v1.StateRequest) returns (v2.SSZContainer) {
    option (google.api.http) = {
      get: "/internal/eth/v1/debug/beacon/states/{state_id}/ssz"
    };
  }

  // GetBeaconStateV2 returns full BeaconState object for given stateId.
  //
  // Spec: https://ethereum.github.io/beacon-APIs/?urls.primaryName=v2.3.0#/Debug/getStateV2
  rpc GetBeaconStateV2(v2.BeaconStateRequestV2) returns (v2.BeaconStateResponseV2) {
    option (google.api.http) = {
      get: "/internal/eth/v2/debug/beacon/states/{state_id}"
    };
  }

  // GetBeaconStateSSZV2 returns the SSZ-serialized version of the full BeaconState object for given stateId.
  //
  // Spec: https://ethereum.github.io/beacon-APIs/?urls.primaryName=v2.3.0#/Debug/getStateV2
  rpc GetBeaconStateSSZV2(v2.BeaconStateRequestV2) returns (v2.SSZContainer) {
    option (google.api.http) = {
      get: "/internal/eth/v2/debug/beacon/states/{state_id}/ssz"
    };
  }

  // ListForkChoiceHeadsV2 retrieves all possible chain heads (leaves of fork choice tree).
  //
  // Spec: https://ethereum.github.io/beacon-APIs/?urls.primaryName=v2.3.0#/Debug/getDebugChainHeadsV2
  rpc ListForkChoiceHeadsV2(google.protobuf.Empty) returns (v2.ForkChoiceHeadsResponse) {
    option (google.api.http) = {
      get: "/internal/eth/v2/debug/beacon/heads"
    };
  }

  // GetForkChoice returns a dump fork choice store.
  //
  // This function is not a part of the official Beacon APIs.
  rpc GetForkChoice(google.protobuf.Empty) returns (v1.ForkChoiceDump) {
    option (google.api.http) = {
      get: "/internal/eth/v1/debug/fork_choice"
    };
  }
}
