// Copyright 2020 Prysmatic Labs.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package ethereum.eth.service;

import "google/api/annotations.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/empty.proto";

import "proto/eth/v1/validator.proto";
import "proto/eth/v2/ssz.proto";
import "proto/eth/v2/validator.proto";

option csharp_namespace = "Ethereum.Eth.Service";
option go_package = "github.com/prysmaticlabs/prysm/v3/proto/eth/service";
option java_multiple_files = true;
option java_outer_classname = "ValidatorServiceProto";
option java_package = "org.ethereum.eth.service";
option php_namespace = "Ethereum\\Eth\\Service";

// Beacon chain validator API
//
// The beacon chain validator API is a set of endpoints to be used by validators for performing their roles.
//
// This service is defined in the upstream Ethereum consensus APIs repository (beacon-apis/apis/validator).
service BeaconValidator {
  // GetAttesterDuties requests the beacon node to provide a set of attestation duties, which should be performed
  // by validators, for a particular epoch.
  //
  // HTTP response usage:
  //  - 200: Successful response
  //  - 400: Invalid epoch or index
  //  - 500: Beacon node internal error
  //  - 503: Beacon node is currently syncing, try again later
  //
  // Spec: https://ethereum.github.io/beacon-APIs/?urls.primaryName=v2.3.0#/Validator/getAttesterDuties
  rpc GetAttesterDuties(v1.AttesterDutiesRequest) returns (v1.AttesterDutiesResponse) {
    option (google.api.http) = {
      post: "/internal/eth/v1/validator/duties/attester/{epoch}"
      body: "*"
    };
  }

  // GetProposerDuties requests beacon node to provide all validators that are scheduled to
  // propose a block in the given epoch.
  //
  // HTTP response usage:
  //  - 200: Successful response
  //  - 400: Invalid epoch
  //  - 500: Beacon node internal error
  //  - 503: Beacon node is currently syncing, try again later
  //
  // Spec: https://ethereum.github.io/beacon-APIs/?urls.primaryName=v2.3.0#/Validator/getProposerDuties
  rpc GetProposerDuties(v1.ProposerDutiesRequest) returns (v1.ProposerDutiesResponse) {
    option (google.api.http) = { get: "/internal/eth/v1/validator/duties/proposer/{epoch}" };
  }

  // GetSyncCommitteeDuties requests the beacon node to provide a set of sync committee duties for a particular epoch.
  //
  // HTTP response usage:
  //  - 200: Successful response
  //  - 400: Invalid epoch or index
  //  - 500: Beacon node internal error
  //  - 503: Beacon node is currently syncing, try again later
  //
  // Spec: https://ethereum.github.io/beacon-APIs/?urls.primaryName=v2.3.0#/Validator/getSyncCommitteeDuties
  rpc GetSyncCommitteeDuties(v2.SyncCommitteeDutiesRequest) returns (v2.SyncCommitteeDutiesResponse) {
    option (google.api.http) = {
      post: "/internal/eth/v1/validator/duties/sync/{epoch}"
      body: "*"
    };
  }

  // ProduceBlockV2 requests the beacon node to produce a valid unsigned beacon block,
  // which can then be signed by a proposer and submitted.
  //
  // HTTP response usage:
  //  - 200: Successful response
  //  - 400: Invalid block production request
  //  - 500: Beacon node internal error
  //  - 503: Beacon node is currently syncing, try again later
  //
  // Spec: https://ethereum.github.io/beacon-APIs/?urls.primaryName=v2.3.0#/Validator/produceBlockV2
  rpc ProduceBlockV2(v1.ProduceBlockRequest) returns (v2.ProduceBlockResponseV2) {
    option (google.api.http) = { get: "/internal/eth/v2/validator/blocks/{slot}" };
  }

  // ProduceBlockV2 requests the beacon node to produce a valid unsigned beacon block,
  // which can then be signed by a proposer and submitted.
  //
  // The produced block is in SSZ form.
  //
  // HTTP response usage:
  //  - 200: Successful response
  //  - 400: Invalid block production request
  //  - 500: Beacon node internal error
  //  - 503: Beacon node is currently syncing, try again later
  //
  // Spec: https://ethereum.github.io/beacon-APIs/?urls.primaryName=v2.3.0#/Validator/produceBlockV2
  rpc ProduceBlockV2SSZ(v1.ProduceBlockRequest) returns (v2.SSZContainer) {
    option (google.api.http) = { get: "/internal/eth/v2/validator/blocks/{slot}/ssz" };
  }

  // ProduceBlindedBlock requests the beacon node to produce a valid unsigned blinded beacon block,
  // which can then be signed by a proposer and submitted.
  //
  // Metadata in the response indicates the type of block produced, and the supported types of block
  // will be added to as forks progress.
  //
  // Pre-Bellatrix, this endpoint will return a regular block.
  // HTTP response usage:
  //  - 200: Successful response
  //  - 400: Invalid block production request
  //  - 500: Beacon node internal error
  //  - 503: Beacon node is currently syncing, try again later
  //
  // Spec: https://ethereum.github.io/beacon-APIs/?urls.primaryName=v2.3.0#/Validator/produceBlindedBlock
  rpc ProduceBlindedBlock(v1.ProduceBlockRequest) returns (v2.ProduceBlindedBlockResponse) {
    option (google.api.http) = { get: "/internal/eth/v1/validator/blinded_blocks/{slot}" };
  }

  // ProduceBlindedBlock requests the beacon node to produce a valid unsigned blinded beacon block,
  // which can then be signed by a proposer and submitted.
  //
  // The produced block is in SSZ form.
  //
  // Metadata in the response indicates the type of block produced, and the supported types of block
  // will be added to as forks progress.
  //
  // Pre-Bellatrix, this endpoint will return a regular block.
  // HTTP response usage:
  //  - 200: Successful response
  //  - 400: Invalid block production request
  //  - 500: Beacon node internal error
  //  - 503: Beacon node is currently syncing, try again later
  //
  // Spec: https://ethereum.github.io/beacon-APIs/?urls.primaryName=v2.3.0#/Validator/produceBlindedBlock
  rpc ProduceBlindedBlockSSZ(v1.ProduceBlockRequest) returns (v2.SSZContainer) {
    option (google.api.http) = { get: "/internal/eth/v1/validator/blinded_blocks/{slot}/ssz" };
  }

  // PrepareBeaconProposer submits fee recipient information to be used when preparing block
  // proposal execution payloads.
  //
  // HTTP response usage:
  //  - 200: Successful response
  //  - 400: Invalid block production request
  //  - 500: Beacon node internal error
  //
  // Spec: https://ethereum.github.io/beacon-APIs/?urls.primaryName=v2.3.0#/Validator/prepareBeaconProposer
  rpc PrepareBeaconProposer(v1.PrepareBeaconProposerRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/internal/eth/v1/validator/prepare_beacon_proposer"
      body: "*"
    };
  }

  // SubmitValidatorRegistration prepares the beacon node for engaging with external builders.
  // The information will be sent by the beacon node to the builder network.
  // It is expected that the validator client will send this information periodically to ensure the beacon node has correct and timely registration information to provide to builders.
  // The validator client should not sign blinded beacon blocks that do not adhere to their latest fee recipient and gas limit preferences.
  // Note that requests containing currently inactive or unknown validator pubkeys will be accepted, as they may become active at a later epoch.
  //
  // HTTP response usage:
  //  - 200: Successful response
  //  - 400: Invalid request syntax
  //  - 500: Beacon node internal error
  //
  // Spec: https://ethereum.github.io/beacon-APIs/#/Validator/registerValidator
  rpc SubmitValidatorRegistration (v1.SubmitValidatorRegistrationsRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/internal/eth/v1/validator/register_validator"
      body: "*"
    };
  }

  // ProduceAttestationData requests that the beacon node produces attestation data for
  // the requested committee index and slot based on the nodes current head.
  //
  // HTTP response usage:
  //  - 200: Successful response
  //  - 400: Invalid request syntax
  //  - 500: Beacon node internal error
  //  - 503: Beacon node is currently syncing, try again later
  //
  // Spec: https://ethereum.github.io/beacon-APIs/?urls.primaryName=v2.3.0#/Validator/produceAttestationData
  rpc ProduceAttestationData(v1.ProduceAttestationDataRequest) returns (v1.ProduceAttestationDataResponse) {
    option (google.api.http) = { get: "/internal/eth/v1/validator/attestation_data" };
  }

  // GetAggregateAttestation aggregates all attestations matching the given attestation data root and slot,
  // returning the aggregated result.
  //
  // HTTP response usage:
  // - 200: Successful response
  // - 400: Invalid request syntax
  // - 500: Beacon node internal error
  //
  // Spec: https://ethereum.github.io/beacon-APIs/?urls.primaryName=v2.3.0#/Validator/getAggregatedAttestation
  rpc GetAggregateAttestation(v1.AggregateAttestationRequest) returns (v1.AggregateAttestationResponse) {
    option (google.api.http) = { get: "/internal/eth/v1/validator/aggregate_attestation" };
  }

  // SubmitAggregateAndProofs verifies given aggregate and proofs and publishes them on appropriate gossipsub topic.
  //
  // Response usage:
  // - 200: Successful response
  // - 400: Invalid request syntax
  // - 500: Beacon node internal error
  //
  // Spec: https://ethereum.github.io/beacon-APIs/?urls.primaryName=v2.3.0#/Validator/publishAggregateAndProofs
  rpc SubmitAggregateAndProofs(v1.SubmitAggregateAndProofsRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/internal/eth/v1/validator/aggregate_and_proofs"
      body: "*"
    };
  }

  // SubmitBeaconCommitteeSubscription searches using discv5 for peers related to
  // the provided subnet information and replaces current peers with those ones if necessary.
  //
  // If validator is_aggregator, beacon node must:
  //   - announce subnet topic subscription on gossipsub.
  //   - aggregate attestations received on that subnet.
  //
  // Response usage:
  // - 200: Slot signature is valid and beacon node has prepared the attestation subnet
  //   Note that we cannot be certain Beacon node will find peers for that subnet for various reasons
  // - 400: Invalid request syntax
  // - 500: Beacon node internal error
  // - 503: Beacon node is currently syncing, try again later
  //
  // Spec: https://ethereum.github.io/beacon-APIs/?urls.primaryName=v2.3.0#/Validator/prepareBeaconCommitteeSubnet
  rpc SubmitBeaconCommitteeSubscription(v1.SubmitBeaconCommitteeSubscriptionsRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/internal/eth/v1/validator/beacon_committee_subscriptions"
      body: "*"
    };
  }

  // SubmitSyncCommitteeSubscription subscribes to a number of sync committee subnets
  //
  // Response usage:
  // - 200: Successful response
  // - 400: Invalid request syntax
  // - 500: Beacon node internal error
  //
  // Spec: https://ethereum.github.io/beacon-APIs/?urls.primaryName=v2.3.0#/Validator/prepareSyncCommitteeSubnets
  rpc SubmitSyncCommitteeSubscription(v2.SubmitSyncCommitteeSubscriptionsRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/internal/eth/v1/validator/sync_committee_subscriptions"
      body: "*"
    };
  }

  // ProduceSyncCommitteeContribution requests that the beacon node produces a sync committee contribution.
  //
  // HTTP response usage:
  //  - 200: Successful response
  //  - 400: Invalid request syntax
  //  - 500: Beacon node internal error
  //  - 503: Beacon node is currently syncing, try again later
  //
  // Spec: https://ethereum.github.io/beacon-APIs/?urls.primaryName=v2.3.0#/Validator/produceSyncCommitteeContribution
  rpc ProduceSyncCommitteeContribution(v2.ProduceSyncCommitteeContributionRequest) returns (v2.ProduceSyncCommitteeContributionResponse) {
    option (google.api.http) = { get: "/internal/eth/v1/validator/sync_committee_contribution" };
  }

  // SubmitContributionAndProofs publishes multiple signed sync committee contribution and proofs.
  //
  // Response usage:
  // - 200: Successful response
  // - 400: Invalid request syntax
  // - 500: Beacon node internal error
  //
  // Spec: https://ethereum.github.io/beacon-APIs/?urls.primaryName=v2.3.0#/Validator/publishContributionAndProofs
  rpc SubmitContributionAndProofs(v2.SubmitContributionAndProofsRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/internal/eth/v1/validator/contribution_and_proofs"
      body: "*"
    };
  }

  // GetLiveness requests the beacon node to indicate if a validator has been observed to be live in a given epoch.
  // The beacon node might detect liveness by observing messages from the validator on the network,
  // in the beacon chain, from its API or from any other source.
  // A beacon node SHOULD support the current and previous epoch, however it MAY support earlier epoch.
  // It is important to note that the values returned by the beacon node are not canonical;
  // they are best-effort and based upon a subjective view of the network.
  // A beacon node that was recently started or suffered a network partition may indicate that a validator is not live when it actually is.
  //
  // Spec: https://ethereum.github.io/beacon-APIs/?urls.primaryName=dev#/Validator/getLiveness
  rpc GetLiveness(v2.GetLivenessRequest) returns (v2.GetLivenessResponse) {
    option (google.api.http) = {
      post: "/internal/eth/v1/validator/liveness/{epoch}"
      body: "*"
    };
  }
}
